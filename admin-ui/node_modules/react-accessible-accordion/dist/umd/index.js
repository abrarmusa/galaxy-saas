(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (factory((global.reactAccessibleAccordion = {}),global.React));
}(this, (function (exports,React) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  // Arbitrary, but ought to be unique to avoid context namespace clashes.
  var CONTEXT_KEY = 'react-accessible-accordion@AccordionContainer';
  var Provider =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Provider, _Component);

    function Provider() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Provider);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Provider)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
        items: _this.props.items || []
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addItem", function (newItem) {
        // Need to use callback style otherwise race-conditions are created by concurrent registrations.
        _this.setState(function (state) {
          var items;

          if (state.items.some(function (item) {
            return item.uuid === newItem.uuid;
          })) {
            // eslint-disable-next-line no-console
            console.error("AccordionItem error: One item already has the uuid \"".concat(newItem.uuid, "\". Uuid property must be unique. See: https://github.com/springload/react-accessible-accordion#accordionitem"));
          }

          if (_this.props.accordion && newItem.expanded) {
            // If this is a true accordion and the new item is expanded, then the others must be closed.
            items = _toConsumableArray(state.items.map(function (item) {
              return _objectSpread({}, item, {
                expanded: false
              });
            })).concat([newItem]);
          } else {
            items = _toConsumableArray(state.items).concat([newItem]);
          }

          return {
            items: items
          };
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeItem", function (key) {
        return _this.setState(function (state) {
          return {
            items: state.items.filter(function (item) {
              return item.uuid !== key;
            })
          };
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setExpanded", function (key, expanded) {
        return _this.setState(function (state) {
          return {
            items: state.items.map(function (item) {
              if (item.uuid === key) {
                return _objectSpread({}, item, {
                  expanded: expanded
                });
              }

              if (_this.props.accordion && expanded) {
                // If this is an accordion, we might need to collapse the other expanded item.
                return _objectSpread({}, item, {
                  expanded: false
                });
              }

              return item;
            })
          };
        }, function () {
          if (_this.props.onChange) {
            _this.props.onChange(_this.props.accordion ? key : _this.state.items.filter(function (item) {
              return item.expanded;
            }).map(function (item) {
              return item.uuid;
            }));
          }
        });
      });

      return _this;
    }

    _createClass(Provider, [{
      key: "getChildContext",
      value: function getChildContext() {
        var context = {
          items: this.state.items,
          accordion: !!this.props.accordion,
          addItem: this.addItem,
          removeItem: this.removeItem,
          setExpanded: this.setExpanded
        };
        return _defineProperty({}, CONTEXT_KEY, context);
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children || null;
      }
    }]);

    return Provider;
  }(React.Component); // eslint-disable-next-line react/no-multi-comp

  _defineProperty(Provider, "childContextTypes", _defineProperty({}, CONTEXT_KEY, function () {
    return null;
  }));

  var Consumer =
  /*#__PURE__*/
  function (_Component2) {
    _inherits(Consumer, _Component2);

    function Consumer() {
      _classCallCheck(this, Consumer);

      return _possibleConstructorReturn(this, _getPrototypeOf(Consumer).apply(this, arguments));
    }

    _createClass(Consumer, [{
      key: "render",
      value: function render() {
        return this.props.children(this.context[CONTEXT_KEY]);
      }
    }]);

    return Consumer;
  }(React.Component);

  _defineProperty(Consumer, "contextTypes", _defineProperty({}, CONTEXT_KEY, function () {
    return null;
  }));

  var accordionDefaultProps = {
    accordion: true
  };

  var Accordion = function Accordion(_ref) {
    var accordion = _ref.accordion,
        rest = _objectWithoutProperties(_ref, ["accordion"]);

    return React__default.createElement("div", _extends({
      role: accordion ? 'tablist' : null
    }, rest));
  };

  Accordion.defaultProps = accordionDefaultProps;

  var defaultProps = {
    accordion: true,
    onChange: function onChange() {},
    className: 'accordion',
    children: null
  };

  var AccordionWrapper =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionWrapper, _Component);

    function AccordionWrapper() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AccordionWrapper);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderAccordion", function (accordionStore) {
        var _this$props = _this.props,
            accordion = _this$props.accordion,
            onChange = _this$props.onChange,
            rest = _objectWithoutProperties(_this$props, ["accordion", "onChange"]);

        return React__default.createElement(Accordion, _extends({
          accordion: accordionStore.accordion
        }, rest));
      });

      return _this;
    }

    _createClass(AccordionWrapper, [{
      key: "render",
      value: function render() {
        return React__default.createElement(Provider, {
          accordion: this.props.accordion,
          onChange: this.props.onChange
        }, React__default.createElement(Consumer, null, this.renderAccordion));
      }
    }]);

    return AccordionWrapper;
  }(React.Component);

  _defineProperty(AccordionWrapper, "defaultProps", defaultProps);

  function _extends$1() {
    _extends$1 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends$1.apply(this, arguments);
  }

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   * 
   */

  function _inheritsLoose$1(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var lib = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var createChangeEmitter = exports.createChangeEmitter = function createChangeEmitter() {
    var currentListeners = [];
    var nextListeners = currentListeners;

    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }

    function listen(listener) {
      if (typeof listener !== 'function') {
        throw new Error('Expected listener to be a function.');
      }

      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function () {
        if (!isSubscribed) {
          return;
        }

        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
      };
    }

    function emit() {
      currentListeners = nextListeners;
      var listeners = currentListeners;

      for (var i = 0; i < listeners.length; i++) {
        listeners[i].apply(listeners, arguments);
      }
    }

    return {
      listen: listen,
      emit: emit
    };
  };
  });

  unwrapExports(lib);
  var lib_1 = lib.createChangeEmitter;

  function symbolObservablePonyfill(root) {
    var result;
    var Symbol = root.Symbol;

    if (typeof Symbol === 'function') {
      if (Symbol.observable) {
        result = Symbol.observable;
      } else {
        result = Symbol('observable');
        Symbol.observable = result;
      }
    } else {
      result = '@@observable';
    }

    return result;
  }

  /* global window */
  var root;

  if (typeof self !== 'undefined') {
    root = self;
  } else if (typeof window !== 'undefined') {
    root = window;
  } else if (typeof global !== 'undefined') {
    root = global;
  } else if (typeof module !== 'undefined') {
    root = module;
  } else {
    root = Function('return this')();
  }

  var result = symbolObservablePonyfill(root);

  var Nothing =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose$1(Nothing, _Component);

    function Nothing() {
      return _Component.apply(this, arguments) || this;
    }

    var _proto = Nothing.prototype;

    _proto.render = function render() {
      return null;
    };

    return Nothing;
  }(React.Component);

  var fromRenderProps = function fromRenderProps(RenderPropsComponent, propsMapper, renderPropName) {
    if (renderPropName === void 0) {
      renderPropName = 'children';
    }

    return function (BaseComponent) {
      var baseFactory = React__default.createFactory(BaseComponent);
      var renderPropsFactory = React__default.createFactory(RenderPropsComponent);

      var FromRenderProps = function FromRenderProps(ownerProps) {
        var _renderPropsFactory;

        return renderPropsFactory((_renderPropsFactory = {}, _renderPropsFactory[renderPropName] = function () {
          return baseFactory(_extends({}, ownerProps, propsMapper.apply(void 0, arguments)));
        }, _renderPropsFactory));
      };

      return FromRenderProps;
    };
  };

  var compose = function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    return funcs.reduce(function (a, b) {
      return function () {
        return a(b.apply(void 0, arguments));
      };
    }, function (arg) {
      return arg;
    });
  };

  /*!
   * consecutive
   * Get consecutive numbers
   * Copyright(c) 2017 ivanoff .$ curl -A cv ivanoff.org.ua
   * MIT Licensed
   */

  var consecutive = function (begin, base, inc) {
    var number = begin || 0;
    if (typeof base !== 'number') base = 10;
    if (typeof inc !== 'number') inc = 1;
    return function () {
      var res;

      if (typeof base === 'undefined' || base === 10) {
        res = number;
        number += inc;
      } else {
        res = number.toString();
        number = (parseInt(number, base) + inc).toString(base);
      }

      return res;
    };
  };

  // Arbitrary, but ought to be unique to avoid context namespace clashes.
  var CONTEXT_KEY$1 = 'react-accessible-accordion@ItemContainer';
  var Provider$1 =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Provider, _Component);

    function Provider() {
      _classCallCheck(this, Provider);

      return _possibleConstructorReturn(this, _getPrototypeOf(Provider).apply(this, arguments));
    }

    _createClass(Provider, [{
      key: "getChildContext",
      value: function getChildContext() {
        var uuid = this.props.uuid;
        var context = {
          uuid: uuid
        };
        return _defineProperty({}, CONTEXT_KEY$1, context);
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children || null;
      }
    }]);

    return Provider;
  }(React.Component);

  _defineProperty(Provider$1, "childContextTypes", _defineProperty({}, CONTEXT_KEY$1, function () {
    return null;
  }));

  // eslint-disable-next-line react/no-multi-comp
  var Consumer$1 =
  /*#__PURE__*/
  function (_Component2) {
    _inherits(Consumer, _Component2);

    function Consumer() {
      _classCallCheck(this, Consumer);

      return _possibleConstructorReturn(this, _getPrototypeOf(Consumer).apply(this, arguments));
    }

    _createClass(Consumer, [{
      key: "render",
      value: function render() {
        return this.props.children(this.context[CONTEXT_KEY$1]);
      }
    }]);

    return Consumer;
  }(React.Component);

  _defineProperty(Consumer$1, "contextTypes", _defineProperty({}, CONTEXT_KEY$1, function () {
    return null;
  }));

  var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2016 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */

  /* global define */
  (function () {

    var hasOwn = {}.hasOwnProperty;

    function classNames() {
      var classes = [];

      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;
        var argType = typeof arg;

        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg)) {
          classes.push(classNames.apply(null, arg));
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }

      return classes.join(' ');
    }

    if (module.exports) {
      module.exports = classNames;
    } else if (typeof undefined === 'function' && typeof undefined.amd === 'object' && undefined.amd) {
      // register as 'classnames', consistent with npm package name
      undefined('classnames', [], function () {
        return classNames;
      });
    } else {
      window.classNames = classNames;
    }
  })();
  });

  var AccordionItem =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionItem, _Component);

    function AccordionItem() {
      _classCallCheck(this, AccordionItem);

      return _possibleConstructorReturn(this, _getPrototypeOf(AccordionItem).apply(this, arguments));
    }

    _createClass(AccordionItem, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            uuid = _this$props.uuid,
            accordionStore = _this$props.accordionStore,
            disabled = _this$props.disabled;
        accordionStore.addItem({
          uuid: uuid,
          expanded: this.props.expanded || false,
          disabled: disabled
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.accordionStore.removeItem(this.props.uuid);
      } // This is here so that the user can dynamically set the 'expanded' state using the 'expanded' prop.

    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props2 = this.props,
            uuid = _this$props2.uuid,
            expanded = _this$props2.expanded,
            accordionStore = _this$props2.accordionStore;

        if (expanded !== prevProps.expanded) {
          accordionStore.setExpanded(uuid, expanded);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            uuid = _this$props3.uuid,
            className = _this$props3.className,
            hideBodyClassName = _this$props3.hideBodyClassName,
            accordionStore = _this$props3.accordionStore,
            disabled = _this$props3.disabled,
            expanded = _this$props3.expanded,
            rest = _objectWithoutProperties(_this$props3, ["uuid", "className", "hideBodyClassName", "accordionStore", "disabled", "expanded"]); // Deliberately not using 'find' because IE compat.


        var currentItem = accordionStore.items.filter(function (item) {
          return item.uuid === uuid;
        })[0];

        if (!currentItem) {
          return null;
        }

        return React__default.createElement("div", _extends({
          className: classnames(className, _defineProperty({}, hideBodyClassName, !currentItem.expanded && hideBodyClassName))
        }, rest));
      }
    }]);

    return AccordionItem;
  }(React.Component);

  var nextUuid = consecutive();
  function resetNextUuid() {
    nextUuid = consecutive();
  }

  var AccordionItemWrapper =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionItemWrapper, _Component);

    function AccordionItemWrapper() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AccordionItemWrapper);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionItemWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "id", nextUuid());

      return _this;
    }

    _createClass(AccordionItemWrapper, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            accordionStore = _this$props.accordionStore,
            uuid = _this$props.uuid,
            rest = _objectWithoutProperties(_this$props, ["accordionStore", "uuid"]);

        var itemUuid = uuid !== undefined ? uuid : this.id;
        return React__default.createElement(Provider$1, {
          uuid: itemUuid
        }, React__default.createElement(AccordionItem, _extends({}, rest, {
          uuid: itemUuid,
          accordionStore: accordionStore
        })));
      }
    }]);

    return AccordionItemWrapper;
  }(React.Component);

  _defineProperty(AccordionItemWrapper, "defaultProps", {
    className: 'accordion__item',
    hideBodyClassName: '',
    disabled: false,
    expanded: false,
    uuid: undefined
  });

  var AccordionItem_wrapper = compose(fromRenderProps(Consumer, function (accordionStore) {
    return {
      accordionStore: accordionStore
    };
  }))(AccordionItemWrapper);

  var AccordionItemTitle =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionItemTitle, _Component);

    function AccordionItemTitle() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AccordionItemTitle);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionItemTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function () {
        var _this$props = _this.props,
            uuid = _this$props.uuid,
            expanded = _this$props.expanded,
            setExpanded = _this$props.setExpanded;
        setExpanded(uuid, !expanded);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyPress", function (evt) {
        if (evt.charCode === 13 || evt.charCode === 32) {
          evt.preventDefault();

          _this.handleClick();
        }
      });

      return _this;
    }

    _createClass(AccordionItemTitle, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            className = _this$props2.className,
            hideBodyClassName = _this$props2.hideBodyClassName,
            item = _this$props2.item,
            accordion = _this$props2.accordion,
            setExpanded = _this$props2.setExpanded,
            expanded = _this$props2.expanded,
            uuid = _this$props2.uuid,
            disabled = _this$props2.disabled,
            rest = _objectWithoutProperties(_this$props2, ["className", "hideBodyClassName", "item", "accordion", "setExpanded", "expanded", "uuid", "disabled"]);

        var id = "accordion__title-".concat(uuid);
        var ariaControls = "accordion__body-".concat(uuid);
        var role = accordion ? 'tab' : 'button';
        var titleClassName = classnames(className, _defineProperty({}, hideBodyClassName, hideBodyClassName && !expanded));

        if (role === 'tab') {
          return React__default.createElement("div", _extends({
            id: id,
            "aria-selected": expanded,
            "aria-controls": ariaControls,
            className: titleClassName,
            onClick: disabled ? undefined : this.handleClick,
            role: role,
            tabIndex: "0" // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
            ,
            onKeyPress: this.handleKeyPress,
            disabled: disabled
          }, rest));
        }

        return React__default.createElement("div", _extends({
          id: id,
          "aria-expanded": expanded,
          "aria-controls": ariaControls,
          className: titleClassName,
          onClick: disabled ? undefined : this.handleClick,
          role: role,
          tabIndex: "0" // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
          ,
          onKeyPress: this.handleKeyPress,
          disabled: disabled
        }, rest));
      }
    }]);

    return AccordionItemTitle;
  }(React.Component);

  _defineProperty(AccordionItemTitle, "accordionElementName", 'AccordionItemTitle');

  // eslint-disable-next-line react/prefer-stateless-function
  var AccordionItemTitleWrapper =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionItemTitleWrapper, _Component);

    function AccordionItemTitleWrapper() {
      _classCallCheck(this, AccordionItemTitleWrapper);

      return _possibleConstructorReturn(this, _getPrototypeOf(AccordionItemTitleWrapper).apply(this, arguments));
    }

    _createClass(AccordionItemTitleWrapper, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            itemStore = _this$props.itemStore,
            accordionStore = _this$props.accordionStore,
            rest = _objectWithoutProperties(_this$props, ["itemStore", "accordionStore"]);

        var uuid = itemStore.uuid;
        var items = accordionStore.items,
            accordion = accordionStore.accordion;
        var item = items.filter(function (stateItem) {
          return stateItem.uuid === uuid;
        })[0];
        return React__default.createElement(AccordionItemTitle, _extends({}, rest, item, {
          setExpanded: accordionStore.setExpanded,
          accordion: accordion
        }));
      }
    }]);

    return AccordionItemTitleWrapper;
  }(React.Component);

  _defineProperty(AccordionItemTitleWrapper, "defaultProps", {
    className: 'accordion__title',
    hideBodyClassName: ''
  });

  var AccordionItemTitle_wrapper = compose(fromRenderProps(Consumer, function (accordionStore) {
    return {
      accordionStore: accordionStore
    };
  }), fromRenderProps(Consumer$1, function (itemStore) {
    return {
      itemStore: itemStore
    };
  }))(AccordionItemTitleWrapper);

  var AccordionItemBody = function AccordionItemBody(props) {
    var className = props.className,
        hideBodyClassName = props.hideBodyClassName,
        uuid = props.uuid,
        expanded = props.expanded,
        disabled = props.disabled,
        accordion = props.accordion,
        rest = _objectWithoutProperties(props, ["className", "hideBodyClassName", "uuid", "expanded", "disabled", "accordion"]);

    return React__default.createElement("div", _extends({
      id: "accordion__body-".concat(uuid),
      className: classnames(className, _defineProperty({}, hideBodyClassName, !expanded)),
      "aria-hidden": !expanded,
      "aria-labelledby": "accordion__title-".concat(uuid),
      role: accordion ? 'tabpanel' : null
    }, rest));
  };

  // eslint-disable-next-line react/prefer-stateless-function
  var AccordionItemBodyWrapper =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionItemBodyWrapper, _Component);

    function AccordionItemBodyWrapper() {
      _classCallCheck(this, AccordionItemBodyWrapper);

      return _possibleConstructorReturn(this, _getPrototypeOf(AccordionItemBodyWrapper).apply(this, arguments));
    }

    _createClass(AccordionItemBodyWrapper, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            itemStore = _this$props.itemStore,
            accordionStore = _this$props.accordionStore,
            rest = _objectWithoutProperties(_this$props, ["itemStore", "accordionStore"]);

        var uuid = itemStore.uuid;
        var items = accordionStore.items,
            accordion = accordionStore.accordion;
        var item = items.filter(function (stateItem) {
          return stateItem.uuid === uuid;
        })[0];
        return item ? React__default.createElement(AccordionItemBody, _extends({}, rest, item, {
          accordion: accordion
        })) : null;
      }
    }]);

    return AccordionItemBodyWrapper;
  }(React.Component);

  _defineProperty(AccordionItemBodyWrapper, "defaultProps", {
    className: 'accordion__body',
    hideBodyClassName: 'accordion__body--hidden'
  });

  var AccordionItemBody_wrapper = compose(fromRenderProps(Consumer, function (accordionStore) {
    return {
      accordionStore: accordionStore
    };
  }), fromRenderProps(Consumer$1, function (itemStore) {
    return {
      itemStore: itemStore
    };
  }))(AccordionItemBodyWrapper);

  // eslint-disable-next-line

  exports.Accordion = AccordionWrapper;
  exports.AccordionItem = AccordionItem_wrapper;
  exports.AccordionItemTitle = AccordionItemTitle_wrapper;
  exports.AccordionItemBody = AccordionItemBody_wrapper;
  exports.resetNextUuid = resetNextUuid;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
