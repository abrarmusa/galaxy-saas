import * as tslib_1 from "tslib";
import * as classNames from 'classnames';
import * as React from 'react';
import { getLoadingModifiers, isLeft, isRight, removeLoadingProps, withHelpersModifiers, } from './../../bulma';
import { getHTMLProps, isOption, } from './../../helpers';
var isDirection = isOption(isLeft, isRight);
var getModifier = function (modifier) {
    var _a;
    if (modifier === true) {
        return { 'has-icons-left has-icons-right': true };
    }
    else if (typeof modifier === 'string') {
        return isDirection(modifier) ? (_a = {}, _a["has-icons-" + modifier] = true, _a) : {};
    }
    else if (Array.isArray(modifier)) {
        return modifier.map(function (str) { return str.toLowerCase().trim(); })
            .reduce(function (init, option) {
            var _a;
            return isDirection(option) ? tslib_1.__assign({}, init, (_a = {}, _a["has-icons-" + option] = true, _a)) : init;
        }, {});
    }
    return {};
};
export function Control(_a) {
    var _b = _a.tag, tag = _b === void 0 ? 'div' : _b, props = tslib_1.__rest(_a, ["tag"]);
    var className = classNames('control', tslib_1.__assign({}, getModifier(props.hasIcons), { 'is-expanded': props.isExpanded }, getLoadingModifiers(props)), props.className);
    var hasIcons = props.hasIcons, isExpanded = props.isExpanded, rest = tslib_1.__rest(props, ["hasIcons", "isExpanded"]);
    var HTMLProps = getHTMLProps(rest, removeLoadingProps);
    return React.createElement(tag, tslib_1.__assign({}, HTMLProps, { className: className }));
}
var HOC = /*@__PURE__*/ withHelpersModifiers(Control);
export default HOC;
//# sourceMappingURL=Control.js.map