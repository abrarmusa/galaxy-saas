import * as tslib_1 from "tslib";
import * as classNames from 'classnames';
import * as React from 'react';
import { getColorModifiers, getLoadingModifiers, getSizeModifiers, getStateModifiers, removeColorProps, removeLoadingProps, removeSizeProps, removeStateProps, withHelpersModifiers, } from './../bulma';
import { combineModifiers, getHTMLProps } from './../helpers';
export function Button(props) {
    var className = classNames('button', tslib_1.__assign({ 'is-inverted': props.isInverted, 'is-link': props.isLink, 'is-outlined': props.isOutlined, 'is-static': props.isStatic }, combineModifiers(props, getStateModifiers, getColorModifiers, getLoadingModifiers, getSizeModifiers)), props.className);
    var render = props.render, isLink = props.isLink, isOutlined = props.isOutlined, isInverted = props.isInverted, isStatic = props.isStatic, rest = tslib_1.__rest(props, ["render", "isLink", "isOutlined", "isInverted", "isStatic"]);
    var HTMLProps = getHTMLProps(rest, removeStateProps, removeColorProps, removeLoadingProps, removeSizeProps);
    if (render)
        return render(tslib_1.__assign({}, HTMLProps, { className: className }));
    var anchor = (React.createElement("a", tslib_1.__assign({}, HTMLProps, { role: "button", className: className })));
    var button = (React.createElement("button", tslib_1.__assign({}, HTMLProps, { type: props.type || 'button', className: className })));
    return props.href ? anchor : button;
}
var HOC = /*@__PURE__*/ withHelpersModifiers(Button);
export default HOC;
//# sourceMappingURL=Button.js.map