import * as tslib_1 from "tslib";
import * as classNames from 'classnames';
import * as React from 'react';
import { combineModifiers, getHTMLProps, is, isBetween, isOption } from './helpers';
export var isMobile = is({ mobile: true });
export var isTablet = is({ tablet: true });
export var isTouch = is({ touch: true });
export var isDesktop = is({ desktop: true });
export var isWidescreen = is({ widescreen: true });
export var isFullHD = is({ fullhd: true });
var isTabletOnly = is({ 'tablet-only': true });
var isDesktopOnly = is({ 'desktop-only': true });
export var isLeft = is({ left: true });
export var isRight = is({ right: true });
export var isCentered = is({ centered: true });
export var isCenter = is({ center: true });
export var isFullWidth = is({ fullwidth: true });
var isSmall = is({ small: true });
var isMedium = is({ medium: true });
var isLarge = is({ large: true });
var isAllPlatforms = isOption(isMobile, isTablet, isDesktop, isTouch, isWidescreen, isTabletOnly, isDesktopOnly);
var isAlign = isOption(isLeft, isCentered, isRight);
var isSize = isOption(isSmall, isMedium, isLarge);
export function getAlignmentModifiers(_a) {
    var align = _a.isAlign;
    var _b;
    return isAlign(align) ? (_b = {}, _b["is-" + align] = true, _b) : {};
}
export function removeAlignmentProps(props) {
    var isAlign = props.isAlign, rest = tslib_1.__rest(props, ["isAlign"]);
    return rest;
}
export function getSizeModifiers(_a) {
    var size = _a.isSize;
    var _b;
    return isSize(size) ? (_b = {}, _b["is-" + size] = true, _b) : {};
}
export function removeSizeProps(props) {
    var isSize = props.isSize, rest = tslib_1.__rest(props, ["isSize"]);
    return rest;
}
function getFullWidthModifiers(props) {
    return {
        'is-fullwidth': props.isFullWidth,
    };
}
function removeFullWidthProps(props) {
    var isFullWidth = props.isFullWidth, rest = tslib_1.__rest(props, ["isFullWidth"]);
    return rest;
}
export function getActiveModifiers(props) {
    return { 'is-active': props.isActive };
}
export function removeActiveModifiers(props) {
    var isActive = props.isActive, rest = tslib_1.__rest(props, ["isActive"]);
    return rest;
}
export function getFocusedModifiers(props) {
    return { 'is-focused': props.isFocused };
}
export function removeFocusedModifiers(props) {
    var isFocused = props.isFocused, rest = tslib_1.__rest(props, ["isFocused"]);
    return rest;
}
export function getHoveredModifiers(props) {
    return { 'is-hovered': props.isHovered };
}
export function removeHoveredModifiers(props) {
    var isHovered = props.isHovered, rest = tslib_1.__rest(props, ["isHovered"]);
    return rest;
}
export function getStateModifiers(props) {
    return tslib_1.__assign({}, getActiveModifiers(props), getFocusedModifiers(props), getHoveredModifiers(props));
}
export function removeStateProps(props) {
    var isActive = props.isActive, isFocused = props.isFocused, isHovered = props.isHovered, rest = tslib_1.__rest(props, ["isActive", "isFocused", "isHovered"]);
    return rest;
}
export function getLoadingModifiers(props) {
    return {
        'is-loading': props.isLoading,
    };
}
export function removeLoadingProps(props) {
    var isLoading = props.isLoading, rest = tslib_1.__rest(props, ["isLoading"]);
    return rest;
}
export function getColorModifiers(_a) {
    var color = _a.isColor;
    var _b;
    return color ? (_b = {}, _b["is-" + color] = true, _b) : {};
}
export function removeColorProps(props) {
    var isColor = props.isColor, rest = tslib_1.__rest(props, ["isColor"]);
    return rest;
}
var isValidHeading = isBetween(1, 6);
export function getHeadingModifiers(_a) {
    var isSpaced = _a.isSpaced, size = _a.isSize;
    var _b;
    var isSize = isValidHeading(size) ? (_b = {}, _b["is-" + size] = true, _b) : {};
    return tslib_1.__assign({}, isSize, { 'is-spaced': isSpaced });
}
export function removeHeadingProps(props) {
    var isSize = props.isSize, isSpaced = props.isSpaced, rest = tslib_1.__rest(props, ["isSize", "isSpaced"]);
    return rest;
}
var isFlex = is({ flex: true });
var isBlock = is({ block: true });
var isInline = is({ inline: true });
var isInlineBlock = is({ 'inline-block': true });
var isInlineFlex = is({ 'inline-flex': true });
var isDisplay = isOption(isFlex, isBlock, isInline, isInlineBlock, isInlineFlex);
var getShowModifiers = function (display) {
    var _a;
    var isDefault = function (str) { return str === 'default' ? true : false; };
    if (typeof display === 'string')
        return _a = {}, _a["is-" + display] = true, _a;
    if (Array.isArray(display))
        return display.reduce(function (acc, display) {
            var _a;
            return (tslib_1.__assign({}, acc, (_a = {}, _a["is-" + display] = true, _a)));
        }, {});
    if (typeof display === 'object') {
        return Object.keys(display).reduce(function (acc, key) {
            var _a, _b;
            if (Array.isArray(display[key])) {
                return display[key].reduce(function (acc, display) {
                    var _a, _b;
                    if (isDefault(display))
                        return tslib_1.__assign({}, acc, (_a = {}, _a["is-" + key] = true, _a));
                    return tslib_1.__assign({}, acc, (_b = {}, _b["is-" + key + "-" + display] = true, _b));
                }, acc);
            }
            if (isDefault(display[key]))
                return tslib_1.__assign({}, acc, (_a = {}, _a["is-" + key] = true, _a));
            return (isDisplay(key) && isAllPlatforms(display[key])) ? tslib_1.__assign({}, acc, (_b = {}, _b["is-" + key + "-" + display[key]] = true, _b)) : acc;
        }, {});
    }
    return {};
};
var getHideModifiers = function (platform) {
    var _a;
    if (typeof platform === 'boolean')
        return platform ? { 'is-hidden': true } : {};
    if (typeof platform === 'string')
        return isAllPlatforms(platform) ? (_a = {}, _a["is-hidden-" + platform] = true, _a) : {};
    if (Array.isArray(platform)) {
        return platform.reduce(function (acc, platform) {
            var _a;
            return isAllPlatforms(platform) ? tslib_1.__assign({}, acc, (_a = {}, _a["is-hidden-" + platform] = true, _a)) : acc;
        }, {});
    }
    return {};
};
var getAlignModifier = function (modifier, helper) {
    var _a;
    return isAlign(modifier) ? (_a = {}, _a[helper + "-" + modifier] = true, _a) : {};
};
var getColorModifier = function (modifier) {
    var _a;
    return modifier ? (_a = {}, _a["has-text-" + modifier] = true, _a) : {};
};
function getHelpersModifiers(_a) {
    var isDisplay = _a.isDisplay, isHidden = _a.isHidden, isPulled = _a.isPulled, isClearfix = _a.isClearfix, isOverlay = _a.isOverlay, isMarginless = _a.isMarginless, isPaddingless = _a.isPaddingless, isUnselectable = _a.isUnselectable, hasTextAlign = _a.hasTextAlign, hasTextColor = _a.hasTextColor;
    return tslib_1.__assign({}, getShowModifiers(isDisplay), getHideModifiers(isHidden), getAlignModifier(isPulled, 'is-pulled'), getAlignModifier(hasTextAlign, 'has-text'), getColorModifier(hasTextColor), { 'is-clearfix': isClearfix, 'is-marginless': isMarginless, 'is-overlay': isOverlay, 'is-paddingless': isPaddingless, 'is-unselectable': isUnselectable });
}
function removeHelpersProps(props) {
    var isDisplay = props.isDisplay, isHidden = props.isHidden, isClearfix = props.isClearfix, isPulled = props.isPulled, isOverlay = props.isOverlay, isMarginless = props.isMarginless, isPaddingless = props.isPaddingless, isUnselectable = props.isUnselectable, hasTextAlign = props.hasTextAlign, hasTextColor = props.hasTextColor, rest = tslib_1.__rest(props, ["isDisplay", "isHidden", "isClearfix", "isPulled", "isOverlay", "isMarginless", "isPaddingless", "isUnselectable", "hasTextAlign", "hasTextColor"]);
    return rest;
}
function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name;
}
export function withHelpersModifiers(Component) {
    var SFC = function (props) {
        var className = classNames(tslib_1.__assign({}, combineModifiers(props, getHelpersModifiers, getFullWidthModifiers)), props.className);
        var rest = getHTMLProps(props, removeHelpersProps, removeFullWidthProps);
        return className ? React.createElement(Component, tslib_1.__assign({}, rest, { className: className })) : React.createElement(Component, tslib_1.__assign({}, rest));
    };
    SFC.displayName = "withHelpersModifiers(" + getDisplayName(Component) + ")";
    return SFC;
}
//# sourceMappingURL=bulma.js.map